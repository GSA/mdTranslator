# MdTranslator - minitest of
# reader / sbJson / module_materialRequest

# History:
#   Stan Smith 2017-06-21 original script

require_relative 'sbjson_test_parent'
require 'adiwg/mdtranslator/readers/sbJson/modules/module_materialRequest'

class TestReaderSbJsonMaterialRequest < TestReaderSbJsonParent

   @@NameSpace = ADIWG::Mdtranslator::Readers::SbJson::MaterialRequest
   @@hIn = TestReaderSbJsonParent.getJson('materialRequest.json')

   def test_complete_materialRequest

      hIn = Marshal::load(Marshal.dump(@@hIn))
      hResponse = Marshal::load(Marshal.dump(@@responseObj))

      metadata = @@NameSpace.unpack(hIn, hResponse)

      # test contact
      hContact = metadata[0]
      refute_nil hContact[:contactId]
      assert_equal 'U.S. Geological Survey ScienceBase', hContact[:name]
      assert_equal 'materialRequestInstructions', hContact[:contactType]

      # test distribution
      hDistribution = metadata[1]
      assert_equal 'sbJson Material Request distributor generated by ADIwg mdTranslator', hDistribution[:description]
      refute_empty hDistribution[:distributor]
      hDistributor = hDistribution[:distributor][0]
      refute_empty hDistributor[:contact]
      hDContact = hDistributor[:contact]
      assert_equal 'distributor', hDContact[:roleName]
      assert_equal 1, hDContact[:parties].length
      hParty = hDContact[:parties][0]
      assert_equal hContact[:contactId],hParty[:contactId]
      assert_equal 'ScienceBase', hParty[:contactType]
      refute_empty hDistributor[:orderProcess]
      assert_equal 1, hDistributor[:orderProcess].length
      hProcess = hDistributor[:orderProcess][0]
      assert_equal 'Material Request Instructions', hProcess[:orderingInstructions]

      # test response object
      assert hResponse[:readerExecutionPass]
      assert_empty hResponse[:readerExecutionMessages]

   end

   def test_empty_materialRequest

      hIn = Marshal::load(Marshal.dump(@@hIn))
      hIn['materialRequestInstructions'] = ''
      hResponse = Marshal::load(Marshal.dump(@@responseObj))

      metadata = @@NameSpace.unpack(hIn, hResponse)

      assert_nil metadata
      assert hResponse[:readerExecutionPass]
      assert_empty hResponse[:readerExecutionMessages]

   end

   def test_missing_materialRequest

      hIn = Marshal::load(Marshal.dump(@@hIn))
      hIn.delete('materialRequestInstructions')
      hResponse = Marshal::load(Marshal.dump(@@responseObj))

      metadata = @@NameSpace.unpack(hIn, hResponse)

      assert_nil metadata
      assert hResponse[:readerExecutionPass]
      assert_empty hResponse[:readerExecutionMessages]

   end

end
