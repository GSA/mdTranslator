# ISO 19110 <<Class>> FGDC
# writer output in XML

# History:
#  Stan Smith 2017-11-16 original script

module ADIWG
   module Mdtranslator
      module Writers
         module Fgdc

            class Fgdc

               def initialize(xml, responseObj)
                  @xml = xml
                  @hResponseObj = responseObj
               end

               def writeXML(intObj)

                  # classes used
                  version = @hResponseObj[:translatorVersion]

                  # document head
                  metadata = @xml.instruct! :xml, encoding: 'UTF-8'
                  @xml.comment!('FGDC METADATA (FGDC-STD-001-1998)')
                  @xml.comment!('Includes Biological Data Profile (FGDC-STD-001.1-1999)')
                  @xml.comment!('The following metadata file was constructed using the ADIwg mdTranslator, http://mdtranslator.adiwg.org')
                  @xml.comment!('mdTranslator software is an open-source project of the Alaska Data Integration working group (ADIwg)')
                  @xml.comment!('mdTranslator and other metadata tools are available at https://github.com/adiwg')
                  @xml.comment!('ADIwg is not responsible for the content of this metadata record')
                  @xml.comment!('This metadata record was generated by mdTranslator ' + version + ' at ' + Time.now.to_s)

                  # metadata
                  @xml.tag!('metadata') do

                     # # feature catalogue - name (required)
                     # unless name.nil?
                     #    @xml.tag!('gmx:name') do
                     #       @xml.tag!('gco:CharacterString', name)
                     #    end
                     # end
                     # if name.nil?
                     #    @xml.tag!('gmx:name', {'gco:nilReason' => 'missing'})
                     # end
                     #
                     # # feature catalogue - scope (required) []
                     # aScopes = hDictionary[:subjects]
                     # aScopes.each do |scope|
                     #    @xml.tag!('gmx:scope') do
                     #       @xml.tag!('gco:CharacterString', scope)
                     #    end
                     # end
                     # if aScopes.empty? && @hResponseObj[:writerShowTags]
                     #    @xml.tag!('gmx:scope', {'gco:nilReason' => 'missing'})
                     # end
                     #
                     # # feature catalogue - field of application []
                     # aUses = hDictionary[:recommendedUses]
                     # aUses.each do |use|
                     #    @xml.tag!('gmx:fieldOfApplication') do
                     #       @xml.tag!('gco:CharacterString', use)
                     #    end
                     # end

                     return metadata
                  end

               end

            end

         end
      end
   end
end
